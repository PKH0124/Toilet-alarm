<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rt-thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rt-thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Apr 03 23:53:12 2025
<BR><P>
<H3>Maximum Stack Usage =        764 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from drv_gpio.o(i.EXTI0_1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from drv_gpio.o(i.EXTI2_3_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from drv_gpio.o(i.EXTI4_15_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[34]">Flash_Thread_Enter</a> from main.o(i.Flash_Thread_Enter) referenced from main.o(i.main)
 <LI><a href="#[11]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[37]">Key_Time_Interrupt</a> from main.o(i.Key_Time_Interrupt) referenced from main.o(i.main)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[36]">Lcd_Thread_Enter</a> from main.o(i.Lcd_Thread_Enter) referenced from main.o(i.main)
 <LI><a href="#[35]">Lora_Thread_Enter</a> from main.o(i.Lora_Thread_Enter) referenced from main.o(i.main)
 <LI><a href="#[f]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from bsp_rtc.o(i.RTC_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[13]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">UART0_IRQHandler</a> from bsp_lora.o(i.UART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">UART1_IRQHandler</a> from bsp_lcd.o(i.UART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">USART0_IRQHandler</a> from bsp_debug.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[42]">_match_name</a> from object.o(i._match_name) referenced from object.o(i.rt_object_find)
 <LI><a href="#[56]">_pin_cmd</a> from dev_pin.o(i._pin_cmd) referenced from dev_pin.o(FSymTab)
 <LI><a href="#[3b]">_pin_control</a> from dev_pin.o(i._pin_control) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[39]">_pin_read</a> from dev_pin.o(i._pin_read) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[3a]">_pin_write</a> from dev_pin.o(i._pin_write) referenced from dev_pin.o(i.rt_device_pin_register)
 <LI><a href="#[27]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[27]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[28]">_thread_exit</a> from thread.o(i._thread_exit) referenced from thread.o(i._thread_init)
 <LI><a href="#[29]">_thread_timeout</a> from thread.o(i._thread_timeout) referenced from thread.o(i._thread_init)
 <LI><a href="#[2b]">alloc_env_cb</a> from ef_env.o(i.alloc_env_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[2e]">check_and_recovery_env_cb</a> from ef_env.o(i.check_and_recovery_env_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[2d]">check_and_recovery_gc_cb</a> from ef_env.o(i.check_and_recovery_gc_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[2c]">check_sec_hdr_cb</a> from ef_env.o(i.check_sec_hdr_cb) referenced from ef_env.o(i.ef_load_env)
 <LI><a href="#[58]">clear</a> from cmd.o(i.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[5e]">cmd_backtrace</a> from kservice.o(i.cmd_backtrace) referenced from kservice.o(FSymTab)
 <LI><a href="#[5d]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[5a]">cmd_list</a> from cmd.o(i.cmd_list) referenced from cmd.o(FSymTab)
 <LI><a href="#[5c]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[33]">do_gc</a> from ef_env.o(i.do_gc) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[2f]">find_env_cb</a> from ef_env.o(i.find_env_cb) referenced from ef_env.o(i.find_env_no_cache)
 <LI><a href="#[30]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[54]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[31]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[32]">gc_check_cb</a> from ef_env.o(i.gc_check_cb) referenced from ef_env.o(i.gc_collect)
 <LI><a href="#[4a]">ht32_configure</a> from drv_usart.o(i.ht32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[4b]">ht32_control</a> from drv_usart.o(i.ht32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[4e]">ht32_dma_transmit</a> from drv_usart.o(i.ht32_dma_transmit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[4d]">ht32_getc</a> from drv_usart.o(i.ht32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[47]">ht32_pin_attach_irq</a> from drv_gpio.o(i.ht32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[48]">ht32_pin_detach_irq</a> from drv_gpio.o(i.ht32_pin_detach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[49]">ht32_pin_irq_enable</a> from drv_gpio.o(i.ht32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[44]">ht32_pin_mode</a> from drv_gpio.o(i.ht32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[46]">ht32_pin_read</a> from drv_gpio.o(i.ht32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[45]">ht32_pin_write</a> from drv_gpio.o(i.ht32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[4c]">ht32_putc</a> from drv_usart.o(i.ht32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[43]">idle_thread_entry</a> from idle.o(i.idle_thread_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[26]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[38]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[5b]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[57]">reboot</a> from drv_common.o(i.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[51]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[52]">rt_hw_usart_init</a> from drv_usart.o(i.rt_hw_usart_init) referenced from drv_usart.o(.rti_fn.1)
 <LI><a href="#[3e]">rt_serial_close</a> from dev_serial.o(i.rt_serial_close) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[41]">rt_serial_control</a> from dev_serial.o(i.rt_serial_control) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[3c]">rt_serial_init</a> from dev_serial.o(i.rt_serial_init) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[3d]">rt_serial_open</a> from dev_serial.o(i.rt_serial_open) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[3f]">rt_serial_read</a> from dev_serial.o(i.rt_serial_read) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[40]">rt_serial_write</a> from dev_serial.o(i.rt_serial_write) referenced from dev_serial.o(i.rt_hw_serial_register)
 <LI><a href="#[53]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[50]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[55]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[4f]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[2a]">sector_statistics_cb</a> from ef_env.o(i.sector_statistics_cb) referenced from ef_env.o(i.alloc_env)
 <LI><a href="#[59]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[14]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>MIDI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[21]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[63]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[64]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1e]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[66]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[18]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[68]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[203]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[85]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[204]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[205]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[206]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[207]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[208]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[193]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_detach_irq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_attach_irq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_atomic_add
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>

<P><STRONG><a name="[194]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_detach_irq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_attach_irq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_atomic_add
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
</UL>

<P><STRONG><a name="[1e3]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1e4]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f1]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[209]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_IsLeapYear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Clear_Struct
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[94]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Getdata
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
</UL>

<P><STRONG><a name="[96]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Getdata
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[95]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Getdata
</UL>

<P><STRONG><a name="[b8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[90]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Network
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[202]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[9c]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[175]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
</UL>

<P><STRONG><a name="[6f]"></a>strtoul</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[73]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Temperature
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Humidity
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Co
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Battery
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[20f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[210]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[211]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[74]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[212]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[78]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[213]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[214]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[195]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ht32f5xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
</UL>

<P><STRONG><a name="[ac]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_usart_gpio_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
</UL>

<P><STRONG><a name="[87]"></a>Abs_Kay_Scan</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, abs_key.o(i.Abs_Kay_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Abs_Kay_Scan &rArr; Bsp_Key_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Interrupt
</UL>

<P><STRONG><a name="[89]"></a>Abs_Lcd_Battery</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, abs_lcd.o(i.Abs_Lcd_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Abs_Lcd_Battery &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[8b]"></a>Abs_Lcd_Co</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, abs_lcd.o(i.Abs_Lcd_Co))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Abs_Lcd_Co &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[8c]"></a>Abs_Lcd_Humidity</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, abs_lcd.o(i.Abs_Lcd_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Abs_Lcd_Humidity &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[8d]"></a>Abs_Lcd_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, abs_lcd.o(i.Abs_Lcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Abs_Lcd_Init &rArr; Bsp_Lcd_Config &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8f]"></a>Abs_Lcd_Network</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, abs_lcd.o(i.Abs_Lcd_Network))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Abs_Lcd_Network &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[91]"></a>Abs_Lcd_Switch</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, abs_lcd.o(i.Abs_Lcd_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Abs_Lcd_Switch &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Interrupt
</UL>

<P><STRONG><a name="[92]"></a>Abs_Lcd_Temperature</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, abs_lcd.o(i.Abs_Lcd_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Abs_Lcd_Temperature &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[93]"></a>Abs_Lora_Getdata</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, abs_lora.o(i.Abs_Lora_Getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Abs_Lora_Getdata &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
</UL>

<P><STRONG><a name="[97]"></a>Abs_Lora_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, abs_lora.o(i.Abs_Lora_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Abs_Lora_Init &rArr; Bsp_Lora_Res &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9b]"></a>App_Data_update</STRONG> (Thumb, 986 bytes, Stack size 88 bytes, app_data.o(i.App_Data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = App_Data_update &rArr; Abs_Lcd_Temperature &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_On
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_On
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Temperature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Network
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Humidity
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Co
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Battery
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Switch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Thread_Enter
</UL>

<P><STRONG><a name="[a4]"></a>Bsp_Beep_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_beep.o(i.Bsp_Beep_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Beep_Config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a0]"></a>Bsp_Beep_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_beep.o(i.Bsp_Beep_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Beep_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Interrupt
</UL>

<P><STRONG><a name="[9e]"></a>Bsp_Beep_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_beep.o(i.Bsp_Beep_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Beep_On
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[ab]"></a>Bsp_Debug_Config</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bsp_debug.o(i.Bsp_Debug_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bsp_Debug_Config &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b0]"></a>Bsp_Ht32led_Config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_ht32led.o(i.Bsp_Ht32led_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Ht32led_Config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b2]"></a>Bsp_Ht32led_Off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_ht32led.o(i.Bsp_Ht32led_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Ht32led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b3]"></a>Bsp_Ht32led_On</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_ht32led.o(i.Bsp_Ht32led_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Ht32led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b4]"></a>Bsp_Key_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_key.o(i.Bsp_Key_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Key_Config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[88]"></a>Bsp_Key_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_key.o(i.Bsp_Key_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Key_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Kay_Scan
</UL>

<P><STRONG><a name="[8e]"></a>Bsp_Lcd_Config</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bsp_lcd.o(i.Bsp_Lcd_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bsp_Lcd_Config &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Init
</UL>

<P><STRONG><a name="[8a]"></a>Bsp_Lcd_Printf</STRONG> (Thumb, 80 bytes, Stack size 232 bytes, bsp_lcd.o(i.Bsp_Lcd_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Temperature
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Network
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Humidity
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Co
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Battery
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Switch
</UL>

<P><STRONG><a name="[bb]"></a>Bsp_Led_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_led.o(i.Bsp_Led_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Led_Config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9f]"></a>Bsp_Led_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Led_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Time_Interrupt
</UL>

<P><STRONG><a name="[9d]"></a>Bsp_Led_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_led.o(i.Bsp_Led_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Led_On
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[bc]"></a>Bsp_Lora_Clear_Struct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_lora.o(i.Bsp_Lora_Clear_Struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Lora_Clear_Struct
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
</UL>

<P><STRONG><a name="[9a]"></a>Bsp_Lora_Res</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_lora.o(i.Bsp_Lora_Res))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Bsp_Lora_Res &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Init
</UL>

<P><STRONG><a name="[99]"></a>Bsp_Lora_Res_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_lora.o(i.Bsp_Lora_Res_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Lora_Res_Config &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Init
</UL>

<P><STRONG><a name="[e4]"></a>Bsp_Lora_Switch_Overflag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lora.o(i.Bsp_Lora_Switch_Overflag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>Bsp_Lora_Usart_Config</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, bsp_lora.o(i.Bsp_Lora_Usart_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Bsp_Lora_Usart_Config &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Init
</UL>

<P><STRONG><a name="[be]"></a>Bsp_Rtc_Adjust</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, bsp_rtc.o(i.Bsp_Rtc_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Rtc_Adjust &rArr; Bsp_Rtc_IsLeapYear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_WriteBackupRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_ReadBackupRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_IsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
</UL>

<P><STRONG><a name="[c2]"></a>Bsp_Rtc_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_rtc.o(i.Bsp_Rtc_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Rtc_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_DeInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClockReadyStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSESMConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_LSECmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClockSourceConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CMPCLRCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
</UL>

<P><STRONG><a name="[cb]"></a>Bsp_Rtc_Get</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, bsp_rtc.o(i.Bsp_Rtc_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Bsp_Rtc_Get &rArr; Bsp_Rtc_IsLeapYear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_ReadBackupRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_IsLeapYear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ce]"></a>Bsp_Rtc_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_rtc.o(i.Bsp_Rtc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Bsp_Rtc_Init &rArr; Bsp_Rtc_Adjust &rArr; Bsp_Rtc_IsLeapYear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_WriteBackupRegister
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_ReadBackupRegister
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCU_CheckReadyAccessed
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bf]"></a>Bsp_Rtc_IsLeapYear</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_rtc.o(i.Bsp_Rtc_IsLeapYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bsp_Rtc_IsLeapYear &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Adjust
</UL>

<P><STRONG><a name="[c6]"></a>CKCU_GetClockReadyStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClockReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[d1]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[d2]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_GetPLLFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[d4]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a5]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_configure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_usart_gpio_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_1_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_3_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_15_IRQHandler &rArr; rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetEdgeStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>EXTI_GetEdgeStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_GetEdgeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>EXTI_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
</UL>

<P><STRONG><a name="[197]"></a>EXTI_IntConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ht32f5xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
</UL>

<P><STRONG><a name="[da]"></a>FLASH_ErasePage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
</UL>

<P><STRONG><a name="[dc]"></a>FLASH_ProgramWordData</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ht32f5xxxx_flash.o(i.FLASH_ProgramWordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>

<P><STRONG><a name="[db]"></a>FLASH_WaitForOperationEnd</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ht32f5xxxx_flash.o(i.FLASH_WaitForOperationEnd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_DriveConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_InputConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Config
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_usart_gpio_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_ReadInBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Read
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_On
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_On
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Off
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Off
</UL>

<P><STRONG><a name="[cf]"></a>PWRCU_CheckReadyAccessed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_CheckReadyAccessed))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
</UL>

<P><STRONG><a name="[c3]"></a>PWRCU_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[c1]"></a>PWRCU_ReadBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_ReadBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Adjust
</UL>

<P><STRONG><a name="[c0]"></a>PWRCU_WriteBackupRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_pwrcu.o(i.PWRCU_WriteBackupRegister))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Adjust
</UL>

<P><STRONG><a name="[ca]"></a>RTC_CMPCLRCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_CMPCLRCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[c7]"></a>RTC_ClockSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[d0]"></a>RTC_Cmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
</UL>

<P><STRONG><a name="[cc]"></a>RTC_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Get
</UL>

<P><STRONG><a name="[e1]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>RTC_IntConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[c5]"></a>RTC_LSECmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_LSECmd))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[c4]"></a>RTC_LSESMConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_LSESMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[c9]"></a>RTC_SetPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Configuration
</UL>

<P><STRONG><a name="[1ce]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[1d1]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[1d0]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[1cf]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32_cm0plus_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 354 bytes, Stack size 0 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp_lora.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Switch_Overflag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_lcd.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = UART1_IRQHandler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_debug.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART1_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_getc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>USART_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_configure
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
</UL>

<P><STRONG><a name="[ae]"></a>USART_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_control
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
</UL>

<P><STRONG><a name="[e3]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_getc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
</UL>

<P><STRONG><a name="[af]"></a>USART_TxRxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_TxRxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_configure
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Usart_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
</UL>

<P><STRONG><a name="[e6]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[216]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[a2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>

<P><STRONG><a name="[217]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[218]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[e8]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[219]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[21a]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[21b]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[b7]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lcd_Printf
</UL>

<P><STRONG><a name="[83]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[d3]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dev_serial.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[21c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_ffs</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[21d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[dd]"></a>easyflash_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, easyflash.o(i.easyflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Thread_Enter
</UL>

<P><STRONG><a name="[15e]"></a>ef_calc_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ef_utils.o(i.ef_calc_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[168]"></a>ef_env_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ef_env.o(i.ef_env_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[16a]"></a>ef_env_set_default</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ef_env.o(i.ef_env_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>

<P><STRONG><a name="[de]"></a>ef_get_env_blob</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ef_env.o(i.ef_get_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = ef_get_env_blob &rArr; get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Thread_Enter
</UL>

<P><STRONG><a name="[169]"></a>ef_load_env</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, ef_env.o(i.ef_load_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>

<P><STRONG><a name="[144]"></a>ef_log_debug</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ef_port.o(i.ef_log_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
</UL>

<P><STRONG><a name="[145]"></a>ef_log_info</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, ef_port.o(i.ef_log_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[16b]"></a>ef_port_env_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_lock))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[16c]"></a>ef_port_env_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_env_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[16f]"></a>ef_port_erase</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ef_port.o(i.ef_port_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ef_port_erase &rArr; ef_log_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[167]"></a>ef_port_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ef_port.o(i.ef_port_init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[15a]"></a>ef_port_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ef_port.o(i.ef_port_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_ff_addr
</UL>

<P><STRONG><a name="[140]"></a>ef_port_write</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ef_port.o(i.ef_port_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordData
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
</UL>

<P><STRONG><a name="[df]"></a>ef_set_env_blob</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ef_env.o(i.ef_set_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Thread_Enter
</UL>

<P><STRONG><a name="[178]"></a>finsh_get_prompt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_get_prompt &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17a]"></a>finsh_getchar</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[17e]"></a>finsh_set_device</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = finsh_set_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[187]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[54]"></a>finsh_system_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[190]"></a>ht32_usart_gpio_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ht32_msp.o(i.ht32_usart_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ht32_usart_gpio_init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_configure
</UL>

<P><STRONG><a name="[157]"></a>list_device</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[151]"></a>list_event</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = list_event &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[153]"></a>list_mailbox</STRONG> (Thumb, 242 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = list_mailbox &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[155]"></a>list_memheap</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[156]"></a>list_mempool</STRONG> (Thumb, 252 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = list_mempool &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[154]"></a>list_msgqueue</STRONG> (Thumb, 234 bytes, Stack size 104 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = list_msgqueue &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[152]"></a>list_mutex</STRONG> (Thumb, 258 bytes, Stack size 112 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = list_mutex &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[150]"></a>list_sem</STRONG> (Thumb, 234 bytes, Stack size 104 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = list_sem &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[14e]"></a>list_thread</STRONG> (Thumb, 358 bytes, Stack size 272 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[14f]"></a>list_timer</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[1a1]"></a>$Super$$main</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = $Super$$main &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Rtc_Get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Key_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Off
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Ht32led_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Debug_Config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Switch
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1a4]"></a>msh_auto_complete</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[14d]"></a>msh_cmd_opt_id_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_cmd_opt_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = msh_cmd_opt_id_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[18e]"></a>msh_exec</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[107]"></a>msh_isint</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, msh_parse.o(i.msh_isint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msh_isint
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[1a8]"></a>msh_opt_auto_complete</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, msh.o(i.msh_opt_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_argc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[158]"></a>msh_opt_list_dump</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, msh.o(i.msh_opt_list_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = msh_opt_list_dump &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[1b0]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[14a]"></a>rt_backtrace</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(i.rt_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_backtrace &rArr; rt_backtrace_frame &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[1b2]"></a>rt_backtrace_frame</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_backtrace_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_backtrace_frame &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
</UL>

<P><STRONG><a name="[14b]"></a>rt_backtrace_thread</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, kservice.o(i.rt_backtrace_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_backtrace_thread &rArr; rt_backtrace_frame &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[184]"></a>rt_calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1b5]"></a>rt_completion_done</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, completion_comm.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[1e6]"></a>rt_completion_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, completion_up.o(i.rt_completion_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[123]"></a>rt_completion_wait</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, completion_comm.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[1b7]"></a>rt_completion_wait_flags</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, completion_up.o(i.rt_completion_wait_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[1b6]"></a>rt_completion_wakeup_by_errno</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, completion_up.o(i.rt_completion_wakeup_by_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[1ca]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1a3]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[f7]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[1b9]"></a>rt_console_set_device</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1fa]"></a>rt_cpu_index</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_up.o(i.rt_cpu_index))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[1e2]"></a>rt_cpu_self</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_up.o(i.rt_cpu_self))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1f3]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_critical_level))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[198]"></a>rt_defunct_execute</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, defunct.o(i.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_thread_entry
</UL>

<P><STRONG><a name="[181]"></a>rt_device_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_close
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[17f]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[180]"></a>rt_device_open</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_open
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[1c0]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[17c]"></a>rt_device_read</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1c1]"></a>rt_device_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>

<P><STRONG><a name="[182]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_device_set_rx_indicate
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[f9]"></a>rt_device_write</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[126]"></a>rt_enter_critical</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1c4]"></a>rt_exit_critical</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>

<P><STRONG><a name="[129]"></a>rt_exit_critical_safe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_exit_critical_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1bd]"></a>rt_free</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1b3]"></a>rt_hw_backtrace_frame_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_backtrace_frame_get))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
</UL>

<P><STRONG><a name="[1b1]"></a>rt_hw_backtrace_frame_unwind</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_backtrace_frame_unwind))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[1c7]"></a>rt_hw_board_clock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.rt_hw_board_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1c6]"></a>rt_hw_board_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_hw_board_init &rArr; rt_system_heap_init &rArr; rt_system_heap_init_generic &rArr; rt_smem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[f8]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[1af]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[6b]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[51]"></a>rt_hw_pin_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1cb]"></a>rt_hw_serial_isr</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, dev_serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[1cd]"></a>rt_hw_serial_register</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, dev_serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[12d]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[1c8]"></a>rt_hw_systick_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_systick_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[52]"></a>rt_hw_usart_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[d5]"></a>rt_interrupt_enter</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d2]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[d9]"></a>rt_interrupt_leave</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a3]"></a>rt_kprintf</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Thread_Enter
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Thread_Enter
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>rt_malloc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, kservice.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[189]"></a>rt_memcpy</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, kstring.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[18c]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kstring.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[14c]"></a>rt_memory_info</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(i.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[fd]"></a>rt_memset</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, kstring.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[125]"></a>rt_mutex_drop_thread</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_drop_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_mutex_drop_thread &rArr; rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[1d5]"></a>rt_mutex_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>

<P><STRONG><a name="[f3]"></a>rt_mutex_release</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[f1]"></a>rt_mutex_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>

<P><STRONG><a name="[1d7]"></a>rt_object_allocate</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[1be]"></a>rt_object_delete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[1bc]"></a>rt_object_detach</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[1bf]"></a>rt_object_find</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_object_find &rArr; rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[1da]"></a>rt_object_for_each</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, object.o(i.rt_object_for_each))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_object_for_each &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[19f]"></a>rt_object_get_information</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[10e]"></a>rt_object_get_type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[1c3]"></a>rt_object_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1bb]"></a>rt_object_is_systemobject</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[106]"></a>rt_pin_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dev_pin.o(i.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>

<P><STRONG><a name="[108]"></a>rt_pin_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[109]"></a>rt_pin_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
</UL>

<P><STRONG><a name="[10a]"></a>rt_pin_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dev_pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
</UL>

<P><STRONG><a name="[132]"></a>rt_sched_insert_thread</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[114]"></a>rt_sched_lock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[1db]"></a>rt_sched_remove_thread</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sched_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[ec]"></a>rt_sched_thread_change_priority</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_change_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sched_thread_change_priority &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[1f6]"></a>rt_sched_thread_close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_close))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[ea]"></a>rt_sched_thread_get_curr_prio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_curr_prio))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>

<P><STRONG><a name="[12a]"></a>rt_sched_thread_get_init_prio</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_init_prio))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>

<P><STRONG><a name="[1f4]"></a>rt_sched_thread_get_stat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_get_stat))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[12c]"></a>rt_sched_thread_init_ctx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sched_thread_init_ctx &rArr; rt_sched_thread_init_priv
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[1dc]"></a>rt_sched_thread_init_priv</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_sched_thread_init_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sched_thread_init_priv
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>

<P><STRONG><a name="[131]"></a>rt_sched_thread_is_suspended</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_is_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[1d6]"></a>rt_sched_thread_ready</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[1fc]"></a>rt_sched_thread_startup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_sched_thread_startup))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[1ff]"></a>rt_sched_thread_timer_start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[1de]"></a>rt_sched_thread_timer_stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_thread_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[1e1]"></a>rt_sched_thread_yield</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scheduler_comm.o(i.rt_sched_thread_yield))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>

<P><STRONG><a name="[1e0]"></a>rt_sched_tick_increase</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler_comm.o(i.rt_sched_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sched_tick_increase &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_yield
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[115]"></a>rt_sched_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sched_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[133]"></a>rt_sched_unlock_n_resched</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_sched_unlock_n_resched))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[118]"></a>rt_schedule</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, scheduler_up.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[186]"></a>rt_sem_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[17d]"></a>rt_sem_release</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[17b]"></a>rt_sem_take</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_sem_take &rArr; _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1c2]"></a>rt_set_errno</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kerrno.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[1e8]"></a>rt_show_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1d4]"></a>rt_smem_alloc</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, mem.o(i.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_smem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[1c5]"></a>rt_smem_free</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mem.o(i.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_smem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1ea]"></a>rt_smem_init</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, mem.o(i.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_smem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>

<P><STRONG><a name="[1eb]"></a>rt_snprintf</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, kstdio.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[10f]"></a>rt_spin_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_up.o(i.rt_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_spin_lock &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[120]"></a>rt_spin_lock_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_up.o(i.rt_spin_lock_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[11b]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_spin_lock_irqsave &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[110]"></a>rt_spin_unlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_spin_unlock &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[11c]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cpu_up.o(i.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_for_each
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[100]"></a>rt_strcmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, kstring.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[1a0]"></a>rt_strerror</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, kerrno.o(i.rt_strerror))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[179]"></a>rt_strlen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, kstring.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[fa]"></a>rt_strncmp</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, kstring.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_match_name
</UL>

<P><STRONG><a name="[1a6]"></a>rt_strncpy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kstring.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1e5]"></a>rt_susp_list_dequeue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ipc.o(i.rt_susp_list_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[135]"></a>rt_susp_list_enqueue</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, ipc.o(i.rt_susp_list_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_susp_list_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[19e]"></a>rt_susp_list_print</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ipc.o(i.rt_susp_list_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_susp_list_print &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1c9]"></a>rt_system_heap_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_system_heap_init &rArr; rt_system_heap_init_generic &rArr; rt_smem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ee]"></a>rt_system_heap_init_generic</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, kservice.o(i.rt_system_heap_init_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_system_heap_init_generic &rArr; rt_smem_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1ef]"></a>rt_system_scheduler_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scheduler_up.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f0]"></a>rt_system_scheduler_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, scheduler_up.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_system_scheduler_start &rArr; _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f2]"></a>rt_system_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[201]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[127]"></a>rt_thread_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_thread_close &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[185]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1ba]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, defunct.o(i.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_thread_defunct_dequeue &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[128]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, defunct.o(i.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_thread_defunct_enqueue &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[1f7]"></a>rt_thread_defunct_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, defunct.o(i.rt_thread_defunct_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_defunct_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f8]"></a>rt_thread_idle_init</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_thread_idle_init &rArr; rt_snprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_index
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f9]"></a>rt_thread_init</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[a1]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Res
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Thread_Enter
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Thread_Enter
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Thread_Enter
</UL>

<P><STRONG><a name="[1b8]"></a>rt_thread_resume</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wakeup_by_errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[f0]"></a>rt_thread_self</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cpu_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[188]"></a>rt_thread_startup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[113]"></a>rt_thread_suspend_to_list</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, thread.o(i.rt_thread_suspend_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_set_suspend_state
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[130]"></a>rt_thread_suspend_with_flag</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[1fb]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[137]"></a>rt_tick_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[e2]"></a>rt_tick_increase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>rt_timer_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_timer_check &rArr; _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[116]"></a>rt_timer_control</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_timer_control &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[1a2]"></a>rt_timer_create</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f5]"></a>rt_timer_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
</UL>

<P><STRONG><a name="[12e]"></a>rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[117]"></a>rt_timer_start</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_timer_start &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait_flags
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[1df]"></a>rt_timer_stop</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
</UL>

<P><STRONG><a name="[1d3]"></a>rt_vsnprintf</STRONG> (Thumb, 1096 bytes, Stack size 88 bytes, rt_vsnprintf_tiny.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[86]"></a>rtthread_startup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>_pin_cmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dev_pin.o(i._pin_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>_pin_cmd_conv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_pin.o(i._pin_cmd_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _pin_cmd_conv &rArr; rt_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[101]"></a>_pin_cmd_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dev_pin.o(i._pin_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _pin_cmd_get &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[102]"></a>_pin_cmd_mode</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _pin_cmd_mode &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[ff]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dev_pin.o(i._pin_cmd_print_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[103]"></a>_pin_cmd_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _pin_cmd_read &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[104]"></a>_pin_cmd_write</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dev_pin.o(i._pin_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[3b]"></a>_pin_control</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, dev_pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[39]"></a>_pin_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dev_pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[3a]"></a>_pin_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dev_pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[1cc]"></a>_serial_check_buffer_size</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dev_serial.o(i._serial_check_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[121]"></a>_serial_int_rx</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, dev_serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _serial_int_rx &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[122]"></a>_serial_int_tx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dev_serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[1e7]"></a>_serial_poll_tx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dev_serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _serial_poll_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[3e]"></a>rt_serial_close</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, dev_serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[41]"></a>rt_serial_control</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dev_serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_serial_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[3c]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dev_serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_serial_init &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[3d]"></a>rt_serial_open</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, dev_serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_serial_open &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[3f]"></a>rt_serial_read</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, dev_serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[40]"></a>rt_serial_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dev_serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_serial_write &rArr; _serial_int_tx &rArr; rt_completion_wait &rArr; rt_completion_wait_flags &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[23]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_common.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[192]"></a>bit2bitno</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_detach_irq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_attach_irq
</UL>

<P><STRONG><a name="[191]"></a>get_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.get_pin))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_read
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_mode
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_irq_enable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_detach_irq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_pin_attach_irq
</UL>

<P><STRONG><a name="[47]"></a>ht32_pin_attach_irq</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, drv_gpio.o(i.ht32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ht32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>ht32_pin_detach_irq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_gpio.o(i.ht32_pin_detach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ht32_pin_detach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>ht32_pin_irq_enable</STRONG> (Thumb, 882 bytes, Stack size 64 bytes, drv_gpio.o(i.ht32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ht32_pin_irq_enable &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>ht32_pin_mode</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, drv_gpio.o(i.ht32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ht32_pin_mode &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>ht32_pin_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_gpio.o(i.ht32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ht32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>ht32_pin_write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, drv_gpio.o(i.ht32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ht32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>pin_irq_hdr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_gpio.o(i.pin_irq_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_irq_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>ht32_configure</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, drv_usart.o(i.ht32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ht32_configure &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; CKCU_GetPLLFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ht32_usart_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>ht32_control</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, drv_usart.o(i.ht32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ht32_control
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>ht32_dma_transmit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_usart.o(i.ht32_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ht32_dma_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>ht32_getc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, drv_usart.o(i.ht32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ht32_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>ht32_putc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, drv_usart.o(i.ht32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ht32_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>usart_isr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_usart.o(i.usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_completion_wakeup_by_errno &rArr; rt_thread_resume &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[5a]"></a>cmd_list</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cmd.o(i.cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cmd_list &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[199]"></a>list_find_init</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[19b]"></a>list_get_next</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = list_get_next &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[19a]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[19c]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[19d]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[59]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[fb]"></a>_msh_exec_cmd</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[5d]"></a>cmd_free</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[5c]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1a9]"></a>msh_get_argc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, msh.o(i.msh_get_argc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msh_get_argc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[fc]"></a>msh_get_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1a7]"></a>msh_get_cmd_opt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_get_cmd_opt &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[5b]"></a>msh_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1ab]"></a>msh_opt_complete</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, msh.o(i.msh_opt_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[1aa]"></a>msh_opt_help</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, msh.o(i.msh_opt_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = msh_opt_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[fe]"></a>msh_split</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1a5]"></a>str_common</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
</UL>

<P><STRONG><a name="[30]"></a>finsh_rx_ind</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_susp_list_dequeue &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[183]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[31]"></a>finsh_thread_entry</STRONG> (Thumb, 1272 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[18b]"></a>shell_auto_complete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = shell_auto_complete &rArr; msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[18a]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[18d]"></a>shell_push_history</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = shell_push_history &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1ec]"></a>rt_soft_atomic_add</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, clock.o(i.rt_soft_atomic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_soft_atomic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[38]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[53]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[50]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[55]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[4f]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[43]"></a>idle_thread_entry</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, idle.o(i.idle_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = idle_thread_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[e9]"></a>_check_and_update_prio</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ipc.o(i._check_and_update_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _check_and_update_prio &rArr; rt_sched_thread_change_priority &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[f4]"></a>_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>

<P><STRONG><a name="[10d]"></a>_rt_mutex_take</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, ipc.o(i._rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[11a]"></a>_rt_sem_take</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, ipc.o(i._rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _rt_sem_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[11f]"></a>_sem_object_init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ipc.o(i._sem_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sem_object_init &rArr; _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[eb]"></a>_thread_get_mutex_priority</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ipc.o(i._thread_get_mutex_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _thread_get_mutex_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[111]"></a>_thread_update_priority</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, ipc.o(i._thread_update_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _thread_update_priority &rArr; rt_sched_thread_change_priority &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[f5]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[112]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[1ed]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>

<P><STRONG><a name="[119]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[134]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ipc.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[ef]"></a>_heap_lock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kservice.o(i._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[f2]"></a>_heap_unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kservice.o(i._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[f6]"></a>_kputs</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, kservice.o(i._kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _kputs &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[5e]"></a>cmd_backtrace</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, kservice.o(i.cmd_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = cmd_backtrace &rArr; rt_backtrace_thread &rArr; rt_backtrace_frame &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(FSymTab)
</UL>
<P><STRONG><a name="[1e9]"></a>plug_holes</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[42]"></a>_match_name</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, object.o(i._match_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _match_name &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> object.o(i.rt_object_find)
</UL>
<P><STRONG><a name="[1d8]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1d9]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[11d]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler_up.o(i._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1dd]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_up.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>

<P><STRONG><a name="[124]"></a>_thread_detach_from_mutex</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, thread.o(i._thread_detach_from_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[28]"></a>_thread_exit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, thread.o(i._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _thread_exit &rArr; _thread_detach_from_mutex &rArr; rt_mutex_release &rArr; rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_close
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[12b]"></a>_thread_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, thread.o(i._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1fd]"></a>_thread_set_suspend_state</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, thread.o(i._thread_set_suspend_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _thread_set_suspend_state
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>

<P><STRONG><a name="[12f]"></a>_thread_sleep</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, thread.o(i._thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _thread_sleep &rArr; rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[29]"></a>_thread_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(i._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _thread_timeout &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[136]"></a>_timer_check</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, timer.o(i._timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _timer_check &rArr; rt_spin_unlock_irqrestore &rArr; rt_exit_critical_safe &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_sched_insert_thread &rArr; rt_thread_self
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[13e]"></a>_timer_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, timer.o(i._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[139]"></a>_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[13d]"></a>_timer_start</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, timer.o(i._timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _timer_start &rArr; rt_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[138]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[13a]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[13b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[13c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_check
</UL>

<P><STRONG><a name="[1ad]"></a>print_number</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, rt_vsnprintf_tiny.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[200]"></a>skip_atoi</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_vsnprintf_tiny.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[34]"></a>Flash_Thread_Enter</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i.Flash_Thread_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = Flash_Thread_Enter &rArr; easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[37]"></a>Key_Time_Interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.Key_Time_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Key_Time_Interrupt &rArr; Abs_Lcd_Switch &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Beep_Off
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lcd_Switch
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Kay_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[36]"></a>Lcd_Thread_Enter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.Lcd_Thread_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Lcd_Thread_Enter &rArr; App_Data_update &rArr; Abs_Lcd_Temperature &rArr; Bsp_Lcd_Printf &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Data_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[35]"></a>Lora_Thread_Enter</STRONG> (Thumb, 88 bytes, Stack size 192 bytes, main.o(i.Lora_Thread_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = Lora_Thread_Enter &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Lora_Clear_Struct
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_Lora_Getdata
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[13f]"></a>align_write</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ef_env.o(i.align_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = align_write &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[142]"></a>alloc_env</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ef_env.o(i.alloc_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[2b]"></a>alloc_env_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ef_env.o(i.alloc_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alloc_env_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[2e]"></a>check_and_recovery_env_cb</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ef_env.o(i.check_and_recovery_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = check_and_recovery_env_cb &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[2d]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ef_env.o(i.check_and_recovery_gc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[2c]"></a>check_sec_hdr_cb</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ef_env.o(i.check_sec_hdr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; ef_port_erase &rArr; ef_log_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.ef_load_env)
</UL>
<P><STRONG><a name="[159]"></a>continue_ff_addr</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, ef_env.o(i.continue_ff_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = continue_ff_addr &rArr; ef_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[15b]"></a>create_env_blob</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, ef_env.o(i.create_env_blob))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[162]"></a>del_env</STRONG> (Thumb, 198 bytes, Stack size 104 bytes, ef_env.o(i.del_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[33]"></a>do_gc</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, ef_env.o(i.do_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[16e]"></a>env_iterator</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, ef_env.o(i.env_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
</UL>

<P><STRONG><a name="[163]"></a>find_env</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ef_env.o(i.find_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[2f]"></a>find_env_cb</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ef_env.o(i.find_env_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = find_env_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.find_env_no_cache)
</UL>
<P><STRONG><a name="[174]"></a>find_env_no_cache</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ef_env.o(i.find_env_no_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[176]"></a>find_next_env_addr</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, ef_env.o(i.find_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = find_next_env_addr &rArr; ef_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>

<P><STRONG><a name="[149]"></a>format_sector</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, ef_env.o(i.format_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = format_sector &rArr; ef_port_erase &rArr; ef_log_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
</UL>

<P><STRONG><a name="[32]"></a>gc_check_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ef_env.o(i.gc_check_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_check_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.gc_collect)
</UL>
<P><STRONG><a name="[148]"></a>gc_collect</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ef_env.o(i.gc_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
</UL>

<P><STRONG><a name="[16d]"></a>get_env</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, ef_env.o(i.get_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = get_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
</UL>

<P><STRONG><a name="[173]"></a>get_env_from_cache</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, ef_env.o(i.get_env_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_env_from_cache &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[166]"></a>get_next_env_addr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ef_env.o(i.get_next_env_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_next_env_addr &rArr; find_next_env_addr &rArr; ef_port_read
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[172]"></a>get_next_sector_addr</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ef_env.o(i.get_next_sector_addr))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[177]"></a>get_sector_from_cache</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ef_env.o(i.get_sector_from_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>

<P><STRONG><a name="[1ae]"></a>get_status</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ef_env.o(i.get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
</UL>

<P><STRONG><a name="[146]"></a>move_env</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, ef_env.o(i.move_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[15c]"></a>new_env</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ef_env.o(i.new_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env_by_kv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[1ac]"></a>new_env_by_kv</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ef_env.o(i.new_env_by_kv))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = new_env_by_kv &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[165]"></a>read_env</STRONG> (Thumb, 290 bytes, Stack size 112 bytes, ef_env.o(i.read_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[171]"></a>read_sector_meta_data</STRONG> (Thumb, 346 bytes, Stack size 120 bytes, ef_env.o(i.read_sector_meta_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continue_ff_addr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[164]"></a>read_status</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ef_env.o(i.read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_status &rArr; ef_log_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
</UL>

<P><STRONG><a name="[143]"></a>sector_iterator</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ef_env.o(i.sector_iterator))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>

<P><STRONG><a name="[2a]"></a>sector_statistics_cb</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ef_env.o(i.sector_statistics_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sector_statistics_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(i.alloc_env)
</UL>
<P><STRONG><a name="[170]"></a>set_env</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ef_env.o(i.set_env))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env_by_kv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
</UL>

<P><STRONG><a name="[18f]"></a>set_status</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ef_env.o(i.set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[161]"></a>update_env_cache</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, ef_env.o(i.update_env_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = update_env_cache &rArr; ef_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[15d]"></a>update_sec_status</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ef_env.o(i.update_sec_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = update_sec_status &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[160]"></a>update_sector_cache</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ef_env.o(i.update_sector_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[15f]"></a>write_env_hdr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ef_env.o(i.write_env_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = write_env_hdr &rArr; write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[147]"></a>write_status</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ef_env.o(i.write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = write_status &rArr; ef_port_write &rArr; FLASH_ProgramWordData
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_env_hdr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
</UL>

<P><STRONG><a name="[ed]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e7]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[10c]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
